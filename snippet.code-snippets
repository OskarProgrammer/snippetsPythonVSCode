{
	"Create class with only __init__ method": {
		"scope": "python",
		"prefix": "initclass",
		"body": [
			"class MyClass(object):",
			"\tdef __init__(self, arguments: type) -> None:",
			"\t\t#your code here for creating the object of this class",
			"\t\t..."
		],
		"description": "Create class with __init__ method"
	},

	"Create class with __super__ and __init__ method": {
		"scope": "python",
		"prefix": "newclass",
		"body": [
			"class MyClass(object):",
			"\tdef __new__(cls) -> object:",
			"\t\t#default",
			"\t\treturn super().__new__(cls)",
			"",
			"\tdef __init__(self, arguments: type) -> None:",
			"\t\t#your code here for creating the object of this class",
			"\t\t..."
		],
		"description": "Create class with __init__ and __super__method"
	},

	"Create abstractmethod": {
		"scope": "python",
		"prefix": "absclass",
		"body": [
			"class MyClass(ABC):",
			"\tdef __new__(cls) -> object:",
			"\t\t#default",
			"\t\treturn super().__new__(cls)",
			"",
			"\tdef __init__(self, arguments: type) -> None:",
			"\t\t#your code here for creating the object of this class",
			"\t\t...",
			"",
			"\t@abstractmethod",
			"\tdef myAbstractMethod(self, *args, **kwargs):",
			"\t\t..."
		],
		"description": "Create abstract class with __init__ , __super__ and abstract method"
	},

	"Create private method":{
		"scope": "python",
		"prefix": "primet",
		"body": [
			"def __myPrivateMethod(self, *args, **kwargs):",
			"\t#your code here",
			"\t..."
		],
		"description": "Create private method in your class"
	},

	"Create protected method": {
		"scope": "python",
		"prefix": "promet",
		"body": [
			"def _myProtectedMethod(self, *args, **kwargs):",
			"\t#your code here",
			"\t..."
		],
		"description": "Create protected method in your class"
	},

	"Create abstract method": {
		"scope": "python",
		"prefix": "absmet",
		"body": [
			"@abstractmethod",
			"def myAbstractMethod(self, *args, **kwargs):",
			"\t..."
		],
		"description": "Create private method in your class"
	},

	"Create private variable": {
		"scope": "python",
		"prefix": "privar",
		"body": [
			"self.__myPrivateVariable = myPrivateVariable",
		],
		"description": "Create private variable in your class"
	},

	"Create protected variable": {
		"scope": "python",
		"prefix": "provar",
		"body": [
			"self._myProtectedVariable = myProtectedVariable",
		],
		"description": "Create protected variable in your class"
	},

	"Create setter for variable": {
		"scope": "python",
		"prefix": "setter",
		"body": [
			"@variable.setter",
			"def variable(self, __value: any):",
			"\tself.__variable = __value"
		],
		"description": "Create setter for private variable"
	},

	"Create getter for variable": {
		"scope": "python",
		"prefix": "getter",
		"body": [
			"@property",
			"def variable(self) -> str:",
			"\treturn self.__variable"
		],
		"description": "Create getter for private variable"
	},

	"Create getter and setter for variable": {
		"scope": "python",
		"prefix": "getset",
		"body": [
			"@property",
			"def variable(self) -> str:",
			"\treturn self.__variable",
			"",
			"@variable.setter",
			"def variable(self, __value: any):",
			"\tself.__variable = __value"
		],
		"description": "Create getter and setter for private variable"
	},

	"Create for loop": {
		"scope": "python",
		"prefix": "looprange",
		"body": [
			"for x in range(start,end):",
			"\t# your code here",
			"\t..."
		],
		"description": "Create for loop with range",
	},

	"Create function": {
		"scope": "python",
		"prefix": "func",
		"body": [
			"def func(*args, **kwargs) -> type:",
			"\t# your code here",
			"\treturn"
		],
		"description": "Create function",
	},

	"Create timer decorator":{
		"scope": "python",
		"prefix": "decoratortimer",
		"body": [
			"def timer(func):",
			"",
			"\tdef real(*args, **kwargs):",
			"",
			"\t\ttime1 = time.time()",
			"",
			"\t\tfunc(*args, **kwargs)",
			"",
			"\t\ttotal = time.time() - time1",
			"",
			"\t\tprint(f\"The function {func.__name__} took {total} seconds\")",
			"\treturn real"
		],
		"description": "Create timer decorator",
	},

	"Open file to read": {
		"scope": "python",
		"prefix": "openfileread",
		"body": [
			"with open(path, 'r') as file:",
			"\tzawartosc = file.read()"
		],
		"description": "Open file to read",
	},

	"Open file to write": {
		"scope": "python",
		"prefix": "openfilewrite",
		"body": [
			"with open(path, 'w') as file:",
			"\tfile.write(\"\")",
		],
		"description": "Open file to write",
	},

	"Open file to append": {
		"scope": "python",
		"prefix": "openfileappend",
		"body": [
			"with open(path, 'a') as file:",
			"\tfile.write(\"\")",
		],
		"description": "Open file to append",
	},

	"Create lambda expression": {
		"scope": "python",
		"prefix": "lambda_expression",
		"body": [
			"power_square = lambda x: x**2",
			"print(power_square(2))"
		],
		"description": "Create lambda expression",
	},	

	"Create counting function": {
		"scope": "python",
		"prefix": "count",
		"body": [
			"def count(n: int):",
			"\tfor x in range(n,0,-1):",
			"\t\tsleep(1)",
			"\t\tprint(x)"
		],
		"description": "Create counting function",
	},

	"Create fibonacci function": {
		"scope": "python",
		"prefix": "fib",
		"body": [
			"def fib(n: int) -> int:",
			"\tif n == 1:",
			"\t\treturn 1",
			"\telif n == 2:",
			"\t\treturn 1",
			"\telse:",
			"\t\treturn fib(n-1)+fib(n-2)"
		],
		"description": "Create fibonacci function",
	},

	"Create generator function": {
		"scope": "python",
		"prefix": "generator",
		"body": [
			"def generator(n: int) -> int:",
			"\tfor x in range(0,n):",
			"\t\tyield x",
			"",
			"#example:",
			"x = generator(10**120)",
			"print(next(x))",
		],
		"description": "Create generator function",
	},

	"Create integration function": {
		"scope": "python",
		"prefix": "integration",
		"body": [
			"def integration(start: int, koniec: int) -> float:",
			"\twynik = scipy.integrate.quad(function, start, koniec)",
			"",
			"def function(x: float) -> float:",
			"\treturn pow(x,2)-3*pow(x,3)+x-25 #your function"
		],
		"description": "Create integration function",
	},
}